//@ts-check

const TOKENS =  /** @type {const}} */ ({
    NUMBER_TYPE: /Number/,
    BOOLEAN_TYPE: /Boolean/,
    STRING_TYPE: /String/,
    ARRAY_TYPE: /Array/,
    FUNCTION_TYPE: /Function/,
    LET: /Let/,
    TRUE: /True/,
    FALSE: /False/,
    AND: /And/,
    OR: /Or/,
    IF: /If/,
    THEN: /Then/,
    ELSE: /Else/,
    END: /End/,
    IDENTIFIER: /[a-zA-Z_][a-zA-Z_\d]+/,
    BE_DEFINED_AS: /:=/,
    LEFT_PARENTHESES: /\(/,
    RIGHT_PARENTHESES: /\)/,
    LEFT_BRACKET: /\[/,
    RIGHT_BRACKET: /\]/,
    NUMBER: /\d+(\.\d+)?/,
    NUMERIC_NEGATION: /-/,
    LOGICAL_NEGATION: /!/,
    EXPONENTIATION: /\*\*/,
    MULTIPLIED_BY: /\*/,
    DIVIDED_BY: /\//,
    MODULUS: /%/,
    PLUS: /\+/,
    GREATER_THAN: />/,
    GREATER_THAN_EQUALS: />=/,
    EQUALS: /=/,
    NOT_EQUALS: /!=/,
    LESS_THAN: /</,
    LESS_THAN_EQUALS: /<=/,
    STRING: /"(?:\\"|[^"])*"/,
    COMMA: /,/,
    THIN_ARROW: /->/,
    COLON: /:/,
    DOT: /\./,
    WHITESPACE: /\s+/,
    ANYTHING_ELSE: /\S+/
});

const matcher = RegExp(Object.entries(TOKENS)
    .map(value => `(?<${value[0]}>${value[1].source})`)
    .join('|'), "g"
);

const text = ``;

const iterator = text.matchAll(matcher);